package com.cbao.eerprospect.domain;

import static com.cbao.eerprospect.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProspectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProspectAllPropertiesEquals(Prospect expected, Prospect actual) {
        assertProspectAutoGeneratedPropertiesEquals(expected, actual);
        assertProspectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProspectAllUpdatablePropertiesEquals(Prospect expected, Prospect actual) {
        assertProspectUpdatableFieldsEquals(expected, actual);
        assertProspectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProspectAutoGeneratedPropertiesEquals(Prospect expected, Prospect actual) {
        assertThat(actual)
            .as("Verify Prospect auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProspectUpdatableFieldsEquals(Prospect expected, Prospect actual) {
        assertThat(actual)
            .as("Verify Prospect relevant properties")
            .satisfies(a -> assertThat(a.getLastName()).as("check lastName").isEqualTo(expected.getLastName()))
            .satisfies(a -> assertThat(a.getFirstName()).as("check firstName").isEqualTo(expected.getFirstName()))
            .satisfies(a -> assertThat(a.getDateOfBirth()).as("check dateOfBirth").isEqualTo(expected.getDateOfBirth()))
            .satisfies(a -> assertThat(a.getCityOfBirth()).as("check cityOfBirth").isEqualTo(expected.getCityOfBirth()))
            .satisfies(a -> assertThat(a.getCountryOfBirth()).as("check countryOfBirth").isEqualTo(expected.getCountryOfBirth()))
            .satisfies(a -> assertThat(a.getNationality()).as("check nationality").isEqualTo(expected.getNationality()))
            .satisfies(a -> assertThat(a.getMotherLastName()).as("check motherLastName").isEqualTo(expected.getMotherLastName()))
            .satisfies(a -> assertThat(a.getMotherFirstName()).as("check motherFirstName").isEqualTo(expected.getMotherFirstName()))
            .satisfies(a -> assertThat(a.getWifeLastName()).as("check wifeLastName").isEqualTo(expected.getWifeLastName()))
            .satisfies(a -> assertThat(a.getWifeFirstName()).as("check wifeFirstName").isEqualTo(expected.getWifeFirstName()))
            .satisfies(a -> assertThat(a.getFamilyStatusLabel()).as("check familyStatusLabel").isEqualTo(expected.getFamilyStatusLabel()))
            .satisfies(a -> assertThat(a.getCountryOfResidence()).as("check countryOfResidence").isEqualTo(expected.getCountryOfResidence())
            )
            .satisfies(a -> assertThat(a.getCity()).as("check city").isEqualTo(expected.getCity()))
            .satisfies(a -> assertThat(a.getAddressLine()).as("check addressLine").isEqualTo(expected.getAddressLine()))
            .satisfies(a -> assertThat(a.getPhoneNumber()).as("check phoneNumber").isEqualTo(expected.getPhoneNumber()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getIdPaperType()).as("check idPaperType").isEqualTo(expected.getIdPaperType()))
            .satisfies(a -> assertThat(a.getIdPaperNumber()).as("check idPaperNumber").isEqualTo(expected.getIdPaperNumber()))
            .satisfies(a ->
                assertThat(a.getIdPaperDeliveryDate()).as("check idPaperDeliveryDate").isEqualTo(expected.getIdPaperDeliveryDate())
            )
            .satisfies(a ->
                assertThat(a.getIdPaperDeliveryPlace()).as("check idPaperDeliveryPlace").isEqualTo(expected.getIdPaperDeliveryPlace())
            )
            .satisfies(a ->
                assertThat(a.getIdPaperValidityDate()).as("check idPaperValidityDate").isEqualTo(expected.getIdPaperValidityDate())
            )
            .satisfies(a -> assertThat(a.getProfessionCategory()).as("check professionCategory").isEqualTo(expected.getProfessionCategory())
            )
            .satisfies(a -> assertThat(a.getProfession()).as("check profession").isEqualTo(expected.getProfession()))
            .satisfies(a -> assertThat(a.getEmployer()).as("check employer").isEqualTo(expected.getEmployer()))
            .satisfies(a ->
                assertThat(a.getIncomeAmount())
                    .as("check incomeAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getIncomeAmount())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProspectUpdatableRelationshipsEquals(Prospect expected, Prospect actual) {
        assertThat(actual)
            .as("Verify Prospect relationships")
            .satisfies(a -> assertThat(a.getCivility()).as("check civility").isEqualTo(expected.getCivility()))
            .satisfies(a -> assertThat(a.getFamilyStatus()).as("check familyStatus").isEqualTo(expected.getFamilyStatus()))
            .satisfies(a -> assertThat(a.getIncomeType()).as("check incomeType").isEqualTo(expected.getIncomeType()))
            .satisfies(a -> assertThat(a.getIncomePeriodicity()).as("check incomePeriodicity").isEqualTo(expected.getIncomePeriodicity()));
    }
}
